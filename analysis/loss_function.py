from analysis.face_model import PlaneModel
import numpy as np
import torch


BORDERS = torch.Tensor([[-0.012, 0.012], [-0.011, 0.02]])
REPETITIONS = 100

POINTS = [
    [ 0.00370761,  0.01909151],
    [ 0.01087046, -0.00770011],
    [-0.00662228, -0.00953438],
    [ 0.00573314,  0.00117392],
    [-0.00063428, -0.01048563],
    [ 0.00692963,  0.01465896],
    [ 0.0045687,   0.01605703],
    [ 0.00378297, -0.00713035],
    [-0.01103512,  0.0065267 ],
    [ 0.0108604,   0.00648186],
    [ 0.00336183,  0.00736461],
    [ 0.00720977,  0.01783317],
    [ 0.00119465,  0.0070814 ],
    [-0.00660133, -0.00333258],
    [ 0.00679883, -0.00894727],
    [ 0.01181347,  0.01261521],
    [-0.00097027,  0.00878327],
    [ 0.00017573,  0.00428118],
    [-0.00320368,  0.00350954],
    [-0.00078506, -0.00730674],
    [-0.0089027,   0.00668516],
    [ 0.00228024,  0.01419505],
    [ 0.01190954,  0.00458361],
    [-0.01071628, -0.00263708],
    [-0.00990064, -0.00321761],
    [ 0.00791844,  0.01274949],
    [ 0.00461565,  0.00410813],
    [-0.0097637,  -0.00392712],
    [-0.00861115,  0.00404501],
    [ 0.00425796, -0.00074916],
    [-0.00522949, -0.00385371],
    [ 0.01021947, -0.01072859],
    [ 0.00171885,  0.00280563],
    [-0.00499714,  0.01108837],
    [-0.00364814, -0.00911703],
    [-0.0043387,  -0.00059592],
    [ 0.00190302,  0.00867167],
    [-0.00567576, -0.00709155],
    [-0.00094961,  0.01138682],
    [ 0.00515864,  0.01851715],
    [ 0.00700115, -0.00950445],
    [-0.0102213,   0.01265534],
    [ 0.00453541,  0.00866878],
    [-0.00125209,  0.00795694],
    [-0.01074621,  0.01232469],
    [ 0.0073771,   0.00463491],
    [ 0.00459262,  0.00756758],
    [-0.00107468,  0.00971853],
    [ 0.00716206,  0.01214719],
    [-0.00650507, -0.00236927],
    [-0.00398329, -0.00607457],
    [-0.00762144, -0.00397024],
    [ 0.00765189, -0.00913727],
    [ 0.01125916, -0.00456435],
    [-0.00461096,  0.01472108],
    [ 0.00840743,  0.00367094],
    [ 0.0029926,  -0.00041693],
    [-0.000454,    0.01446431],
    [-0.00808835,  0.01101528],
    [ 0.00856302,  0.01558734],
    [-0.00577079,  0.01493608],
    [ 0.00021,     0.00635072],
    [-0.0014675,  -0.01044809],
    [ 0.00806463, -0.01050337],
    [ 0.00194072, -0.00328318],
    [-0.00851855, -0.00908254],
    [-0.00181677,  0.00447769],
    [ 0.00363559,  0.00073769],
    [ 0.00652813,  0.01376762],
    [-0.00774222,  0.01878214],
    [ 0.00013844, -0.00166482],
    [-0.00255728,  0.00358327],
    [-0.0059741,   0.01495999],
    [ 0.01158685,  0.00904594],
    [ 0.00655074, -0.00098591],
    [-0.00098288,  0.00883258],
    [-0.0050203,  -0.00367406],
    [ 0.00877902,  0.01370573],
    [ 0.00278831,  0.00777775],
    [ 0.01093697, -0.00711388],
    [-0.00556321, -0.00352527],
    [-0.00716032, -0.00195967],
    [ 0.00145236, -0.00289148],
    [ 0.00054253,  0.01968612],
    [ 0.00266001, -0.00679704],
    [-0.00079341, -0.00523052],
    [ 0.00437281,  0.01798495],
    [-0.00015721, -0.00988918],
    [-0.00900448,  0.01479777],
    [ 0.00820122,  0.00750964],
    [-0.00252657, -0.00316872],
    [-0.00300687, -0.00627093],
    [ 0.00932239,  0.00957208],
    [-0.00216118, -0.00482966],
    [ 0.00095357,  0.00239726],
    [ 0.01102804,  0.01431909],
    [ 0.01042228, -0.00639555],
    [-0.00119581, -0.00525905],
    [ 0.00027267,  0.01774308],
    [-0.00854028,  0.01996917]
]



class Loss():
    def __init__(self, manager):
        self.__face_manager = manager


    def generate_points(self, num_dim = 2):
        return torch.distributions.Uniform(low = BORDERS[:, 0], high = BORDERS[:, 1], size=(REPETITIONS, 2))


    def loss_function(self, explorer_pos):
        print(explorer_pos)
        sensor_pos = np.zeros(explorer_pos.size())
        for y in range(len(explorer_pos)):
            for x in range(len(explorer_pos[y])):
                sensor_pos[y, x] = float(explorer_pos[y, x])
        temps = self.__face_manager.get_T(sensor_pos)

        vector_a = np.cat(sensor_pos[0], np.array([temps[0]]))
        vector_b = np.cat(sensor_pos[1], np.array([temps[1]]))
        vector_c = np.cat(sensor_pos[2], np.array([temps[2]]))

        plane = PlaneModel(vector_a, vector_b, vector_c)
        real_temp = self.__face_manager.get_T(POINTS)
        pred_temp = plane.get_T(POINTS)
        return np.sum(np.abs(real_temp - pred_temp))
    



if __name__ == "__main__":
    pass